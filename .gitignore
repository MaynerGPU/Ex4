package Ex4;

import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

class Sapo extends Thread {
    private static final int DISTANCIA_MAXIMA = 50; // Dist칙ncia total da corrida (metros)
    private static final int TAMANHO_MAX_SALTO = 5; // M치ximo que um sapo pode pular por vez
    private static AtomicInteger colocacao = new AtomicInteger(0); // Para controlar a ordem de chegada

    private String nome;
    private Random random;
    private int distanciaPercorrida = 0;

    public Sapo(String nome) {
        this.nome = nome;
        this.random = new Random();
    }

    @Override
    public void run() {
        while (distanciaPercorrida < DISTANCIA_MAXIMA) {
            int salto = random.nextInt(TAMANHO_MAX_SALTO + 1); // Salto entre 0 e o m치ximo permitido
            distanciaPercorrida += salto;

            if (distanciaPercorrida > DISTANCIA_MAXIMA) {
                distanciaPercorrida = DISTANCIA_MAXIMA; // Ajusta para n칚o ultrapassar
            }

            System.out.println(nome + " saltou " + salto + " metros. Dist칙ncia total: " + distanciaPercorrida + " metros.");

            try {
                Thread.sleep(200); // Simula um tempo entre os saltos
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        int posicaoFinal = colocacao.incrementAndGet();
        System.out.println("游끠 " + nome + " chegou! Coloca칞칚o: " + posicaoFinal + "췈 lugar!");
    }
}

public class Corrida {
    public static void main(String[] args) {
        System.out.println("Corrida de Sapos iniciada!\n");

        Sapo sapo1 = new Sapo("Sapo 1");
        Sapo sapo2 = new Sapo("Sapo 2");
        Sapo sapo3 = new Sapo("Sapo 3");
        Sapo sapo4 = new Sapo("Sapo 4");
        Sapo sapo5 = new Sapo("Sapo 5");

        sapo1.start();
        sapo2.start();
        sapo3.start();
        sapo4.start();
        sapo5.start();
    }
}
